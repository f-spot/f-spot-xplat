// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Io {

		[DllImport("libgio-2.0-0.dll")]
		static extern int g_io_error_quark();

		public static int ErrorQuark() {
			int raw_ret = g_io_error_quark();
			int ret = raw_ret;
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern void g_io_scheduler_push_job(GLibSharp.IOSchedulerJobFuncNative job_func, IntPtr user_data, GLib.DestroyNotify notify, int io_priority, IntPtr cancellable);

		public static void SchedulerPushJob(IOSchedulerJobFunc job_func, GLib.DestroyNotify notify, int io_priority, Cancellable cancellable) {
			var job_func_wrapper = new GLibSharp.IOSchedulerJobFuncWrapper (job_func);
			g_io_scheduler_push_job(job_func_wrapper.NativeDelegate, IntPtr.Zero, notify, io_priority, cancellable == null ? IntPtr.Zero : cancellable.Handle);
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern int g_io_error_from_errno(int err_no);

		public static IOErrorEnum ErrorFromErrno (int err_no) {
			int raw_ret = g_io_error_from_errno(err_no);
			var ret = (IOErrorEnum) raw_ret;
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_io_modules_load_all_in_directory(IntPtr dirname);

		public static GLib.List ModulesLoadAllInDirectory(string dirname) {
			IntPtr native_dirname = GLib.Marshaller.StringToPtrGStrdup (dirname);
			var raw_ret = g_io_modules_load_all_in_directory(native_dirname);
			var ret = new GLib.List(raw_ret);
			GLib.Marshaller.Free (native_dirname);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern void g_io_scheduler_cancel_all_jobs();

		public static void SchedulerCancelAllJobs() {
			g_io_scheduler_cancel_all_jobs();
		}

#endregion
	}
}
