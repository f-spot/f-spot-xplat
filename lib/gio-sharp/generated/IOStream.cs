// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class IOStream : GLib.Object {

		[Obsolete]
		protected IOStream(GLib.GType gtype) : base(gtype) {}
		public IOStream(IntPtr raw) : base(raw) {}

		protected IOStream() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[GLib.Property ("closed")]
		public bool Closed {
			get {
				GLib.Value val = GetProperty ("closed");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				var val = new GLib.Value(value);
				SetProperty("closed", val);
				val.Dispose ();
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_io_stream_get_output_stream(IntPtr raw);

		[GLib.Property ("output-stream")]
		public OutputStream OutputStream {
			get  {
				var raw_ret = g_io_stream_get_output_stream(Handle);
				var ret = GLib.Object.GetObject (raw_ret) as OutputStream;
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_io_stream_get_input_stream(IntPtr raw);

		[GLib.Property ("input-stream")]
		public InputStream InputStream {
			get  {
				var raw_ret = g_io_stream_get_input_stream(Handle);
				var ret = GLib.Object.GetObject (raw_ret) as InputStream;
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_io_stream_get_type();

		public static new GLib.GType GType { 
			get {
				var raw_ret = g_io_stream_get_type();
				var ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern bool g_io_stream_has_pending(IntPtr raw);

		public bool HasPending { 
			get {
				bool raw_ret = g_io_stream_has_pending(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern unsafe bool g_io_stream_set_pending(IntPtr raw, out IntPtr error);

		public unsafe bool SetPending() {
			var error = IntPtr.Zero;
			bool raw_ret = g_io_stream_set_pending(Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern bool g_io_stream_is_closed(IntPtr raw);

		public bool IsClosed { 
			get {
				bool raw_ret = g_io_stream_is_closed(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern unsafe bool g_io_stream_close(IntPtr raw, IntPtr cancellable, out IntPtr error);

		public unsafe bool Close(Cancellable cancellable) {
			var error = IntPtr.Zero;
			bool raw_ret = g_io_stream_close(Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern void g_io_stream_close_async(IntPtr raw, int io_priority, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);

		public void CloseAsync(int io_priority, Cancellable cancellable, AsyncReadyCallback cb) {
			var cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			g_io_stream_close_async(Handle, io_priority, cancellable == null ? IntPtr.Zero : cancellable.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern unsafe bool g_io_stream_close_finish(IntPtr raw, IntPtr result, out IntPtr error);

		public unsafe bool CloseFinish(AsyncResult result) {
			var error = IntPtr.Zero;
			bool raw_ret = g_io_stream_close_finish(Handle, result == null ? IntPtr.Zero : result.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern void g_io_stream_clear_pending(IntPtr raw);

		public void ClearPending() {
			g_io_stream_clear_pending(Handle);
		}

#endregion
	}
}
