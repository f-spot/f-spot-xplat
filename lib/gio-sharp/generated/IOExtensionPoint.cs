// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class IOExtensionPoint : GLib.Opaque {

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_io_extension_point_implement(IntPtr extension_point_name, IntPtr type, IntPtr extension_name, int priority);

		public static IOExtension Implement (string extension_point_name, GLib.GType type, string extension_name, int priority) {
			IntPtr native_extension_point_name = GLib.Marshaller.StringToPtrGStrdup (extension_point_name);
			IntPtr native_extension_name = GLib.Marshaller.StringToPtrGStrdup (extension_name);
			var raw_ret = g_io_extension_point_implement(native_extension_point_name, type.Val, native_extension_name, priority);
			IOExtension ret = raw_ret == IntPtr.Zero ? null : (IOExtension) GLib.Opaque.GetOpaque (raw_ret, typeof (IOExtension), false);
			GLib.Marshaller.Free (native_extension_point_name);
			GLib.Marshaller.Free (native_extension_name);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_io_extension_point_register(IntPtr name);

		public static IOExtensionPoint Register (string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			var raw_ret = g_io_extension_point_register(native_name);
			IOExtensionPoint ret = raw_ret == IntPtr.Zero ? null : (IOExtensionPoint) GLib.Opaque.GetOpaque (raw_ret, typeof (IOExtensionPoint), false);
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_io_extension_point_get_required_type(IntPtr raw);

		[DllImport("libgio-2.0-0.dll")]
		static extern void g_io_extension_point_set_required_type(IntPtr raw, IntPtr type);

		public GLib.GType RequiredType { 
			get {
				var raw_ret = g_io_extension_point_get_required_type(Handle);
				var ret = new GLib.GType(raw_ret);
				return ret;
			}
			set {
				g_io_extension_point_set_required_type(Handle, value.Val);
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_io_extension_point_lookup(IntPtr name);

		public static IOExtensionPoint Lookup (string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			var raw_ret = g_io_extension_point_lookup(native_name);
			IOExtensionPoint ret = raw_ret == IntPtr.Zero ? null : (IOExtensionPoint) GLib.Opaque.GetOpaque (raw_ret, typeof (IOExtensionPoint), false);
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_io_extension_point_get_extensions(IntPtr raw);

		public GLib.List Extensions { 
			get {
				var raw_ret = g_io_extension_point_get_extensions(Handle);
				var ret = new GLib.List(raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_io_extension_point_get_extension_by_name(IntPtr raw, IntPtr name);

		public IOExtension GetExtensionByName (string name) {
			IntPtr native_name = GLib.Marshaller.StringToPtrGStrdup (name);
			var raw_ret = g_io_extension_point_get_extension_by_name(Handle, native_name);
			IOExtension ret = raw_ret == IntPtr.Zero ? null : (IOExtension) GLib.Opaque.GetOpaque (raw_ret, typeof (IOExtension), false);
			GLib.Marshaller.Free (native_name);
			return ret;
		}

		public IOExtensionPoint(IntPtr raw) : base(raw) {}

#endregion
	}
}
