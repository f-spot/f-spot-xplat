// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class AsyncResultAdapter : GLib.GInterfaceAdapter, AsyncResult
	{

		static AsyncResultIface iface;

		struct AsyncResultIface {
			public IntPtr gtype;
			public IntPtr itype;

			public GetUserDataDelegate get_user_data;
			public GetSourceObjectDelegate get_source_object;
		}

		static AsyncResultAdapter ()
		{
			GLib.GType.Register (_gtype, typeof(AsyncResultAdapter));
			iface.get_user_data = new GetUserDataDelegate (GetUserDataCallback);
			iface.get_source_object = new GetSourceObjectDelegate (GetSourceObjectCallback);
		}


		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetUserDataDelegate (IntPtr async_result);

		static IntPtr GetUserDataCallback (IntPtr async_result)
		{
			try {
				var __obj = GLib.Object.GetObject (async_result, false) as AsyncResultImplementor;
				var __result = __obj.UserData;
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetSourceObjectDelegate (IntPtr async_result);

		static IntPtr GetSourceObjectCallback (IntPtr async_result)
		{
			try {
				var __obj = GLib.Object.GetObject (async_result, false) as AsyncResultImplementor;
				var __result = __obj.SourceObject;
				return __result == null ? IntPtr.Zero : __result.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}
		static void Initialize (IntPtr ifaceptr, IntPtr data)
		{
			var native_iface = (AsyncResultIface) Marshal.PtrToStructure (ifaceptr, typeof (AsyncResultIface));
			native_iface.get_user_data = iface.get_user_data;
			native_iface.get_source_object = iface.get_source_object;
			Marshal.StructureToPtr (native_iface, ifaceptr, false);
			var gch = (GCHandle) data;
			gch.Free ();
		}

		public AsyncResultAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		public AsyncResultAdapter (AsyncResultImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			Implementor = implementor;
		}

		public AsyncResultAdapter (IntPtr handle)
		{
			this.handle = handle;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_async_result_get_type();

		static GLib.GType _gtype = new GLib.GType (g_async_result_get_type ());

		public override GLib.GType GType {
			get {
				return _gtype;
			}
		}

		readonly IntPtr handle;
		public override IntPtr Handle {
			get {
				if (handle != IntPtr.Zero)
					return handle;
				return Implementor == null ? IntPtr.Zero : Implementor.Handle;
			}
		}

		public static AsyncResult GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static AsyncResult GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is AsyncResultImplementor)
				return new AsyncResultAdapter (obj as AsyncResultImplementor);
			else if (obj as AsyncResult == null)
				return new AsyncResultAdapter (obj.Handle);
			else
				return obj as AsyncResult;
		}

        public AsyncResultImplementor Implementor { get; }

        [DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_async_result_get_source_object(IntPtr raw);

		public GLib.Object SourceObject { 
			get {
				var raw_ret = g_async_result_get_source_object(Handle);
				GLib.Object ret = GLib.Object.GetObject (raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_async_result_get_user_data(IntPtr raw);

		public IntPtr UserData { 
			get {
				var raw_ret = g_async_result_get_user_data(Handle);
				var ret = raw_ret;
				return ret;
			}
		}

#endregion
	}
}
