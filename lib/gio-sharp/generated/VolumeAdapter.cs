// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class VolumeAdapter : GLib.GInterfaceAdapter, Volume
	{

		public VolumeAdapter (IntPtr handle)
		{
			this.handle = handle;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_volume_get_type();

		static GLib.GType _gtype = new GLib.GType (g_volume_get_type ());

		public override GLib.GType GType {
			get {
				return _gtype;
			}
		}

		readonly IntPtr handle;
		public override IntPtr Handle {
			get {
				return handle;
			}
		}

		public static Volume GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static Volume GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj as Volume == null)
				return new VolumeAdapter (obj.Handle);
			else
				return obj as Volume;
		}

		[GLib.Signal("changed")]
		public event EventHandler Changed {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "changed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "changed");
				sig.RemoveDelegate (value);
			}
		}

		[GLib.Signal("removed")]
		public event EventHandler Removed {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "removed");
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (GLib.Object.GetObject (Handle), "removed");
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_volume_get_icon(IntPtr raw);

		public Icon Icon { 
			get {
				var raw_ret = g_volume_get_icon(Handle);
				var ret = GLib.IconAdapter.GetObject (raw_ret, false);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern bool g_volume_mount_finish(IntPtr raw, IntPtr result, out IntPtr error);

		public bool MountFinish(AsyncResult result) {
			var error = IntPtr.Zero;
			bool raw_ret = g_volume_mount_finish(Handle, result == null ? IntPtr.Zero : result.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern bool g_volume_can_eject(IntPtr raw);

		public bool CanEject() {
			bool raw_ret = g_volume_can_eject(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_volume_enumerate_identifiers(IntPtr raw);

		public string EnumerateIdentifiers() {
			var raw_ret = g_volume_enumerate_identifiers(Handle);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern void g_volume_eject_with_operation(IntPtr raw, int flags, IntPtr mount_operation, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);

		public void EjectWithOperation(MountUnmountFlags flags, MountOperation mount_operation, Cancellable cancellable, AsyncReadyCallback cb) {
			var cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			g_volume_eject_with_operation(Handle, (int) flags, mount_operation == null ? IntPtr.Zero : mount_operation.Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern void g_volume_mount(IntPtr raw, int flags, IntPtr mount_operation, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);

		public void Mount(MountMountFlags flags, MountOperation mount_operation, Cancellable cancellable, AsyncReadyCallback cb) {
			var cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			g_volume_mount(Handle, (int) flags, mount_operation == null ? IntPtr.Zero : mount_operation.Handle, cancellable == null ? IntPtr.Zero : cancellable.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern void g_volume_eject(IntPtr raw, int flags, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);

		[Obsolete]
		public void Eject(MountUnmountFlags flags, Cancellable cancellable, AsyncReadyCallback cb) {
			var cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			g_volume_eject(Handle, (int) flags, cancellable == null ? IntPtr.Zero : cancellable.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_volume_get_name(IntPtr raw);

		public string Name { 
			get {
				var raw_ret = g_volume_get_name(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_volume_get_drive(IntPtr raw);

		public Drive Drive { 
			get {
				var raw_ret = g_volume_get_drive(Handle);
				var ret = GLib.DriveAdapter.GetObject (raw_ret, false);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_volume_get_identifier(IntPtr raw, IntPtr kind);

		public string GetIdentifier(string kind) {
			IntPtr native_kind = GLib.Marshaller.StringToPtrGStrdup (kind);
			var raw_ret = g_volume_get_identifier(Handle, native_kind);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			GLib.Marshaller.Free (native_kind);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern bool g_volume_should_automount(IntPtr raw);

		public bool ShouldAutomount() {
			bool raw_ret = g_volume_should_automount(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern bool g_volume_can_mount(IntPtr raw);

		public bool CanMount() {
			bool raw_ret = g_volume_can_mount(Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_volume_get_activation_root(IntPtr raw);

		public File ActivationRoot { 
			get {
				var raw_ret = g_volume_get_activation_root(Handle);
				var ret = GLib.FileAdapter.GetObject (raw_ret, false);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_volume_get_mount(IntPtr raw);

		public Mount MountInstance { 
			get {
				var raw_ret = g_volume_get_mount(Handle);
				var ret = GLib.MountAdapter.GetObject (raw_ret, false);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern bool g_volume_eject_with_operation_finish(IntPtr raw, IntPtr result, out IntPtr error);

		public bool EjectWithOperationFinish(AsyncResult result) {
			var error = IntPtr.Zero;
			bool raw_ret = g_volume_eject_with_operation_finish(Handle, result == null ? IntPtr.Zero : result.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_volume_get_uuid(IntPtr raw);

		public string Uuid { 
			get {
				var raw_ret = g_volume_get_uuid(Handle);
				string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern bool g_volume_eject_finish(IntPtr raw, IntPtr result, out IntPtr error);

		[Obsolete]
		public bool EjectFinish(AsyncResult result) {
			var error = IntPtr.Zero;
			bool raw_ret = g_volume_eject_finish(Handle, result == null ? IntPtr.Zero : result.Handle, out error);
			bool ret = raw_ret;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

#endregion
	}
}
