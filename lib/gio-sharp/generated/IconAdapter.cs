// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class IconAdapter : GLib.GInterfaceAdapter, Icon
	{

		static IconIface iface;

		struct IconIface {
			public IntPtr gtype;
			public IntPtr itype;

			public HashDelegate hash;
			public EqualDelegate equal;
			public IntPtr to_tokens;
			public IntPtr from_tokens;
		}

		static IconAdapter ()
		{
			GLib.GType.Register (_gtype, typeof(IconAdapter));
			iface.hash = new HashDelegate (HashCallback);
			iface.equal = new EqualDelegate (EqualCallback);
		}


		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate uint HashDelegate (IntPtr icon);

		static uint HashCallback (IntPtr icon)
		{
			try {
				var __obj = GLib.Object.GetObject (icon, false) as IconImplementor;
				uint __result = __obj.Hash ();
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool EqualDelegate (IntPtr icon1, IntPtr icon2);

		static bool EqualCallback (IntPtr icon1, IntPtr icon2)
		{
			try {
				var __obj = GLib.Object.GetObject (icon1, false) as IconImplementor;
				bool __result = __obj.Equal (GLib.IconAdapter.GetObject (icon2, false));
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}
		static void Initialize (IntPtr ifaceptr, IntPtr data)
		{
			var native_iface = (IconIface) Marshal.PtrToStructure (ifaceptr, typeof (IconIface));
			native_iface.hash = iface.hash;
			native_iface.equal = iface.equal;
			native_iface.to_tokens = iface.to_tokens;
			native_iface.from_tokens = iface.from_tokens;
			Marshal.StructureToPtr (native_iface, ifaceptr, false);
			var gch = (GCHandle) data;
			gch.Free ();
		}

		public IconAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		public IconAdapter (IconImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			Implementor = implementor;
		}

		public IconAdapter (IntPtr handle)
		{
			this.handle = handle;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_icon_get_type();

		static GLib.GType _gtype = new GLib.GType (g_icon_get_type ());

		public override GLib.GType GType {
			get {
				return _gtype;
			}
		}

		readonly IntPtr handle;
		public override IntPtr Handle {
			get {
				if (handle != IntPtr.Zero)
					return handle;
				return Implementor == null ? IntPtr.Zero : Implementor.Handle;
			}
		}

		public static Icon GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static Icon GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is IconImplementor)
				return new IconAdapter (obj as IconImplementor);
			else if (obj as Icon == null)
				return new IconAdapter (obj.Handle);
			else
				return obj as Icon;
		}

        public IconImplementor Implementor { get; }

        [DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_icon_to_string(IntPtr raw);

		public override string ToString() {
			var raw_ret = g_icon_to_string(Handle);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern bool g_icon_equal(IntPtr raw, IntPtr icon2);

		public bool Equal(Icon icon2) {
			bool raw_ret = g_icon_equal(Handle, icon2 == null ? IntPtr.Zero : icon2.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern uint g_icon_hash(IntPtr icon);

		public static uint Hash(IntPtr icon) {
			uint raw_ret = g_icon_hash(icon);
			uint ret = raw_ret;
			return ret;
		}

#endregion
	}
}
