// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class EmblemedIcon : GLib.Object, Icon
	{

		[Obsolete]
		protected EmblemedIcon(GLib.GType gtype) : base(gtype) {}
		public EmblemedIcon(IntPtr raw) : base(raw) {}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_emblemed_icon_new(IntPtr icon, IntPtr emblem);

		public EmblemedIcon (Icon icon, Emblem emblem) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (EmblemedIcon)) {
				throw new InvalidOperationException ("Can't override this constructor.");
			}
			Raw = g_emblemed_icon_new(icon == null ? IntPtr.Zero : icon.Handle, emblem == null ? IntPtr.Zero : emblem.Handle);
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_emblemed_icon_get_icon(IntPtr raw);

		public Icon Icon { 
			get {
				var raw_ret = g_emblemed_icon_get_icon(Handle);
				var ret = GLib.IconAdapter.GetObject (raw_ret, false);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_emblemed_icon_get_emblems(IntPtr raw);

		public GLib.List Emblems { 
			get {
				var raw_ret = g_emblemed_icon_get_emblems(Handle);
				var ret = new GLib.List(raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_emblemed_icon_get_type();

		public static new GLib.GType GType { 
			get {
				var raw_ret = g_emblemed_icon_get_type();
				var ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern void g_emblemed_icon_add_emblem(IntPtr raw, IntPtr emblem);

		public void AddEmblem(Emblem emblem) {
			g_emblemed_icon_add_emblem(Handle, emblem == null ? IntPtr.Zero : emblem.Handle);
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_icon_to_string(IntPtr raw);

		public override string ToString() {
			var raw_ret = g_icon_to_string(Handle);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern bool g_icon_equal(IntPtr raw, IntPtr icon2);

		public bool Equal(Icon icon2) {
			bool raw_ret = g_icon_equal(Handle, icon2 == null ? IntPtr.Zero : icon2.Handle);
			bool ret = raw_ret;
			return ret;
		}

#endregion
	}
}
