// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class AppLaunchContext : GLib.Object {

		[Obsolete]
		protected AppLaunchContext(GLib.GType gtype) : base(gtype) {}
		public AppLaunchContext(IntPtr raw) : base(raw) {}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_app_launch_context_new();

		public AppLaunchContext () : base (IntPtr.Zero)
		{
			if (GetType () != typeof (AppLaunchContext)) {
				CreateNativeObject (new string [0], new GLib.Value[0]);
				return;
			}
			Raw = g_app_launch_context_new();
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_app_launch_context_get_startup_notify_id(IntPtr raw, IntPtr info, IntPtr files);

		public string GetStartupNotifyId(AppInfo info, GLib.List files) {
			var raw_ret = g_app_launch_context_get_startup_notify_id(Handle, info == null ? IntPtr.Zero : info.Handle, files == null ? IntPtr.Zero : files.Handle);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_app_launch_context_get_type();

		public static new GLib.GType GType { 
			get {
				var raw_ret = g_app_launch_context_get_type();
				var ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_app_launch_context_get_display(IntPtr raw, IntPtr info, IntPtr files);

		public string GetDisplay(AppInfo info, GLib.List files) {
			var raw_ret = g_app_launch_context_get_display(Handle, info == null ? IntPtr.Zero : info.Handle, files == null ? IntPtr.Zero : files.Handle);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern void g_app_launch_context_launch_failed(IntPtr raw, IntPtr startup_notify_id);

		public void LaunchFailed(string startup_notify_id) {
			IntPtr native_startup_notify_id = GLib.Marshaller.StringToPtrGStrdup (startup_notify_id);
			g_app_launch_context_launch_failed(Handle, native_startup_notify_id);
			GLib.Marshaller.Free (native_startup_notify_id);
		}

#endregion
	}
}
