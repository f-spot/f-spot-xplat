// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class SrvTarget : GLib.Opaque {

		[DllImport("libgio-2.0-0.dll")]
		static extern ushort g_srv_target_get_weight(IntPtr raw);

		public ushort Weight { 
			get {
				ushort raw_ret = g_srv_target_get_weight(Handle);
				ushort ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_srv_target_get_hostname(IntPtr raw);

		public string Hostname { 
			get {
				var raw_ret = g_srv_target_get_hostname(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_srv_target_get_type();

		public static GLib.GType GType { 
			get {
				var raw_ret = g_srv_target_get_type();
				var ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_srv_target_list_sort(IntPtr targets);

		public static GLib.List ListSort(GLib.List targets) {
			var raw_ret = g_srv_target_list_sort(targets == null ? IntPtr.Zero : targets.Handle);
			var ret = new GLib.List(raw_ret);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_srv_target_copy(IntPtr raw);

		public SrvTarget Copy () {
			var raw_ret = g_srv_target_copy(Handle);
			SrvTarget ret = raw_ret == IntPtr.Zero ? null : (SrvTarget) GLib.Opaque.GetOpaque (raw_ret, typeof (SrvTarget), true);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern ushort g_srv_target_get_priority(IntPtr raw);

		public ushort Priority { 
			get {
				ushort raw_ret = g_srv_target_get_priority(Handle);
				ushort ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern ushort g_srv_target_get_port(IntPtr raw);

		public ushort Port { 
			get {
				ushort raw_ret = g_srv_target_get_port(Handle);
				ushort ret = raw_ret;
				return ret;
			}
		}

		public SrvTarget(IntPtr raw) : base(raw) {}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_srv_target_new(IntPtr hostname, ushort port, ushort priority, ushort weight);

		public SrvTarget (string hostname, ushort port, ushort priority, ushort weight) 
		{
			IntPtr native_hostname = GLib.Marshaller.StringToPtrGStrdup (hostname);
			Raw = g_srv_target_new(native_hostname, port, priority, weight);
			GLib.Marshaller.Free (native_hostname);
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern void g_srv_target_free(IntPtr raw);

		protected override void Free (IntPtr raw)
		{
			g_srv_target_free (raw);
		}

		class FinalizerInfo {
			readonly IntPtr handle;

			public FinalizerInfo (IntPtr handle)
			{
				this.handle = handle;
			}

			public bool Handler ()
			{
				g_srv_target_free (handle);
				return false;
			}
		}

		~SrvTarget ()
		{
			if (!Owned)
				return;
			var info = new FinalizerInfo (Handle);
			GLib.Timeout.Add (50, new GLib.TimeoutHandler (info.Handler));
		}

#endregion
	}
}
