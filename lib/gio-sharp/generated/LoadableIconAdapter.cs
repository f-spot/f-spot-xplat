// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class LoadableIconAdapter : GLib.GInterfaceAdapter, LoadableIcon
	{

		static LoadableIconIface iface;

		struct LoadableIconIface {
			public IntPtr gtype;
			public IntPtr itype;

			public LoadDelegate load;
			public LoadAsyncDelegate load_async;
			public LoadFinishDelegate load_finish;
		}

		static LoadableIconAdapter ()
		{
			GLib.GType.Register (_gtype, typeof(LoadableIconAdapter));
			iface.load = new LoadDelegate (LoadCallback);
			iface.load_async = new LoadAsyncDelegate (LoadAsyncCallback);
			iface.load_finish = new LoadFinishDelegate (LoadFinishCallback);
		}


		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr LoadDelegate (IntPtr icon, int size, IntPtr type, IntPtr cancellable, out IntPtr error);

		static IntPtr LoadCallback (IntPtr icon, int size, IntPtr type, IntPtr cancellable, out IntPtr error)
		{
			error = IntPtr.Zero;

			try {
				var __obj = GLib.Object.GetObject (icon, false) as LoadableIconImplementor;
				var __result = __obj.Load (size, GLib.Marshaller.PtrToStringGFree(type), GLib.Object.GetObject (cancellable) as Cancellable);
				return __result == null ? IntPtr.Zero : __result.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void LoadAsyncDelegate (IntPtr icon, int size, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);

		static void LoadAsyncCallback (IntPtr icon, int size, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data)
		{
			try {
				var __obj = GLib.Object.GetObject (icon, false) as LoadableIconImplementor;
				var cb_invoker = new GLibSharp.AsyncReadyCallbackInvoker (cb, user_data);
				__obj.LoadAsync (size, GLib.Object.GetObject (cancellable) as Cancellable, cb_invoker.Handler);
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr LoadFinishDelegate (IntPtr icon, IntPtr res, IntPtr type, out IntPtr error);

		static IntPtr LoadFinishCallback (IntPtr icon, IntPtr res, IntPtr type, out IntPtr error)
		{
			error = IntPtr.Zero;

			try {
				var __obj = GLib.Object.GetObject (icon, false) as LoadableIconImplementor;
				var __result = __obj.LoadFinish (GLib.AsyncResultAdapter.GetObject (res, false), GLib.Marshaller.PtrToStringGFree(type));
				return __result == null ? IntPtr.Zero : __result.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}
		static void Initialize (IntPtr ifaceptr, IntPtr data)
		{
			var native_iface = (LoadableIconIface) Marshal.PtrToStructure (ifaceptr, typeof (LoadableIconIface));
			native_iface.load = iface.load;
			native_iface.load_async = iface.load_async;
			native_iface.load_finish = iface.load_finish;
			Marshal.StructureToPtr (native_iface, ifaceptr, false);
			var gch = (GCHandle) data;
			gch.Free ();
		}

		public LoadableIconAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		public LoadableIconAdapter (LoadableIconImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			Implementor = implementor;
		}

		public LoadableIconAdapter (IntPtr handle)
		{
			this.handle = handle;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_loadable_icon_get_type();

		static GLib.GType _gtype = new GLib.GType (g_loadable_icon_get_type ());

		public override GLib.GType GType {
			get {
				return _gtype;
			}
		}

		readonly IntPtr handle;
		public override IntPtr Handle {
			get {
				if (handle != IntPtr.Zero)
					return handle;
				return Implementor == null ? IntPtr.Zero : Implementor.Handle;
			}
		}

		public static LoadableIcon GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static LoadableIcon GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is LoadableIconImplementor)
				return new LoadableIconAdapter (obj as LoadableIconImplementor);
			else if (obj as LoadableIcon == null)
				return new LoadableIconAdapter (obj.Handle);
			else
				return obj as LoadableIcon;
		}

        public LoadableIconImplementor Implementor { get; }

        [DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_loadable_icon_load(IntPtr raw, int size, IntPtr type, IntPtr cancellable, out IntPtr error);

		public InputStream Load (int size, string type, Cancellable cancellable) {
			var error = IntPtr.Zero;
			var raw_ret = g_loadable_icon_load(Handle, size, GLib.Marshaller.StringToPtrGStrdup(type), cancellable == null ? IntPtr.Zero : cancellable.Handle, out error);
			var ret = GLib.Object.GetObject (raw_ret) as InputStream;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_loadable_icon_load_finish(IntPtr raw, IntPtr res, IntPtr type, out IntPtr error);

		public InputStream LoadFinish (AsyncResult res, string type) {
			var error = IntPtr.Zero;
			var raw_ret = g_loadable_icon_load_finish(Handle, res == null ? IntPtr.Zero : res.Handle, GLib.Marshaller.StringToPtrGStrdup(type), out error);
			var ret = GLib.Object.GetObject (raw_ret) as InputStream;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern void g_loadable_icon_load_async(IntPtr raw, int size, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);

		public void LoadAsync(int size, Cancellable cancellable, AsyncReadyCallback cb) {
			var cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			g_loadable_icon_load_async(Handle, size, cancellable == null ? IntPtr.Zero : cancellable.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
		}

#endregion
	}
}
