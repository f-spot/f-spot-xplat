// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Emblem : GLib.Object, Icon
	{

		[Obsolete]
		protected Emblem(GLib.GType gtype) : base(gtype) {}
		public Emblem(IntPtr raw) : base(raw) {}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_emblem_new(IntPtr icon);

		public Emblem (Icon icon) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Emblem)) {
				var vals = new ArrayList();
				var names = new ArrayList();
				if (icon != null) {
					names.Add ("icon");
					vals.Add (new GLib.Value (icon));
				}
				CreateNativeObject ((string[])names.ToArray (typeof (string)), (GLib.Value[])vals.ToArray (typeof (GLib.Value)));
				return;
			}
			Raw = g_emblem_new(icon == null ? IntPtr.Zero : icon.Handle);
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_emblem_new_with_origin(IntPtr icon, int origin);

		public Emblem (Icon icon, EmblemOrigin origin) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (Emblem)) {
				var vals = new ArrayList();
				var names = new ArrayList();
				if (icon != null) {
					names.Add ("icon");
					vals.Add (new GLib.Value (icon));
				}
				names.Add ("origin");
				vals.Add (new GLib.Value (origin));
				CreateNativeObject ((string[])names.ToArray (typeof (string)), (GLib.Value[])vals.ToArray (typeof (GLib.Value)));
				return;
			}
			Raw = g_emblem_new_with_origin(icon == null ? IntPtr.Zero : icon.Handle, (int) origin);
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern int g_emblem_get_origin(IntPtr raw);

		[GLib.Property ("origin")]
		public EmblemOrigin Origin {
			get  {
				int raw_ret = g_emblem_get_origin(Handle);
				var ret = (EmblemOrigin) raw_ret;
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_emblem_get_icon(IntPtr raw);

		[GLib.Property ("icon")]
		public Icon Icon {
			get  {
				var raw_ret = g_emblem_get_icon(Handle);
				var ret = GLib.IconAdapter.GetObject (raw_ret, false);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_emblem_get_type();

		public static new GLib.GType GType { 
			get {
				var raw_ret = g_emblem_get_type();
				var ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_icon_to_string(IntPtr raw);

		public override string ToString() {
			var raw_ret = g_icon_to_string(Handle);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern bool g_icon_equal(IntPtr raw, IntPtr icon2);

		public bool Equal(Icon icon2) {
			bool raw_ret = g_icon_equal(Handle, icon2 == null ? IntPtr.Zero : icon2.Handle);
			bool ret = raw_ret;
			return ret;
		}

#endregion
	}
}
