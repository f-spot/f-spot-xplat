// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Content {

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_content_type_get_description(IntPtr type);

		public static string TypeGetDescription(string type) {
			IntPtr native_type = GLib.Marshaller.StringToPtrGStrdup (type);
			var raw_ret = g_content_type_get_description(native_type);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			GLib.Marshaller.Free (native_type);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_content_type_from_mime_type(IntPtr mime_type);

		public static string TypeFromMimeType(string mime_type) {
			IntPtr native_mime_type = GLib.Marshaller.StringToPtrGStrdup (mime_type);
			var raw_ret = g_content_type_from_mime_type(native_mime_type);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			GLib.Marshaller.Free (native_mime_type);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern bool g_content_type_is_a(IntPtr type, IntPtr supertype);

		public static bool TypeIsA(string type, string supertype) {
			IntPtr native_type = GLib.Marshaller.StringToPtrGStrdup (type);
			IntPtr native_supertype = GLib.Marshaller.StringToPtrGStrdup (supertype);
			bool raw_ret = g_content_type_is_a(native_type, native_supertype);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_type);
			GLib.Marshaller.Free (native_supertype);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_content_types_get_registered();

		public static GLib.List TypesGetRegistered() {
			var raw_ret = g_content_types_get_registered();
			var ret = new GLib.List(raw_ret);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern bool g_content_type_equals(IntPtr type1, IntPtr type2);

		public static bool TypeEquals(string type1, string type2) {
			IntPtr native_type1 = GLib.Marshaller.StringToPtrGStrdup (type1);
			IntPtr native_type2 = GLib.Marshaller.StringToPtrGStrdup (type2);
			bool raw_ret = g_content_type_equals(native_type1, native_type2);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_type1);
			GLib.Marshaller.Free (native_type2);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_content_type_get_mime_type(IntPtr type);

		public static string TypeGetMimeType(string type) {
			IntPtr native_type = GLib.Marshaller.StringToPtrGStrdup (type);
			var raw_ret = g_content_type_get_mime_type(native_type);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			GLib.Marshaller.Free (native_type);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_content_type_guess(IntPtr filename, out byte data, UIntPtr data_size, out bool result_uncertain);

		public static string TypeGuess(string filename, out byte data, ulong data_size, out bool result_uncertain) {
			IntPtr native_filename = GLib.Marshaller.StringToPtrGStrdup (filename);
			var raw_ret = g_content_type_guess(native_filename, out data, new UIntPtr (data_size), out result_uncertain);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			GLib.Marshaller.Free (native_filename);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern bool g_content_type_can_be_executable(IntPtr type);

		public static bool TypeCanBeExecutable(string type) {
			IntPtr native_type = GLib.Marshaller.StringToPtrGStrdup (type);
			bool raw_ret = g_content_type_can_be_executable(native_type);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_type);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_content_type_guess_for_tree(IntPtr root);

		public static string TypeGuessForTree(File root) {
			var raw_ret = g_content_type_guess_for_tree(root == null ? IntPtr.Zero : root.Handle);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern bool g_content_type_is_unknown(IntPtr type);

		public static bool TypeIsUnknown(string type) {
			IntPtr native_type = GLib.Marshaller.StringToPtrGStrdup (type);
			bool raw_ret = g_content_type_is_unknown(native_type);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_type);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_content_type_get_icon(IntPtr type);

		public static Icon TypeGetIcon (string type) {
			IntPtr native_type = GLib.Marshaller.StringToPtrGStrdup (type);
			var raw_ret = g_content_type_get_icon(native_type);
			var ret = GLib.IconAdapter.GetObject (raw_ret, false);
			GLib.Marshaller.Free (native_type);
			return ret;
		}

#endregion
	}
}
