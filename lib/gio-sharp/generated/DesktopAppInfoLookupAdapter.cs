// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class DesktopAppInfoLookupAdapter : GLib.GInterfaceAdapter, DesktopAppInfoLookup
	{

		static DesktopAppInfoLookupIface iface;

		struct DesktopAppInfoLookupIface {
			public IntPtr gtype;
			public IntPtr itype;

			public GetDefaultForUriSchemeDelegate get_default_for_uri_scheme;
		}

		static DesktopAppInfoLookupAdapter ()
		{
			GLib.GType.Register (_gtype, typeof(DesktopAppInfoLookupAdapter));
			iface.get_default_for_uri_scheme = new GetDefaultForUriSchemeDelegate (GetDefaultForUriSchemeCallback);
		}


		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate IntPtr GetDefaultForUriSchemeDelegate (IntPtr lookup, IntPtr uri_scheme);

		static IntPtr GetDefaultForUriSchemeCallback (IntPtr lookup, IntPtr uri_scheme)
		{
			try {
				var __obj = GLib.Object.GetObject (lookup, false) as DesktopAppInfoLookupImplementor;
				var __result = __obj.GetDefaultForUriScheme (GLib.Marshaller.Utf8PtrToString (uri_scheme));
				return __result == null ? IntPtr.Zero : __result.Handle;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}
		static void Initialize (IntPtr ifaceptr, IntPtr data)
		{
			var native_iface = (DesktopAppInfoLookupIface) Marshal.PtrToStructure (ifaceptr, typeof (DesktopAppInfoLookupIface));
			native_iface.get_default_for_uri_scheme = iface.get_default_for_uri_scheme;
			Marshal.StructureToPtr (native_iface, ifaceptr, false);
			var gch = (GCHandle) data;
			gch.Free ();
		}

		public DesktopAppInfoLookupAdapter ()
		{
			InitHandler = new GLib.GInterfaceInitHandler (Initialize);
		}

		public DesktopAppInfoLookupAdapter (DesktopAppInfoLookupImplementor implementor)
		{
			if (implementor == null)
				throw new ArgumentNullException ("implementor");
			Implementor = implementor;
		}

		public DesktopAppInfoLookupAdapter (IntPtr handle)
		{
			this.handle = handle;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_desktop_app_info_lookup_get_type();

		static GLib.GType _gtype = new GLib.GType (g_desktop_app_info_lookup_get_type ());

		public override GLib.GType GType {
			get {
				return _gtype;
			}
		}

		readonly IntPtr handle;
		public override IntPtr Handle {
			get {
				if (handle != IntPtr.Zero)
					return handle;
				return Implementor == null ? IntPtr.Zero : Implementor.Handle;
			}
		}

		public static DesktopAppInfoLookup GetObject (IntPtr handle, bool owned)
		{
			GLib.Object obj = GLib.Object.GetObject (handle, owned);
			return GetObject (obj);
		}

		public static DesktopAppInfoLookup GetObject (GLib.Object obj)
		{
			if (obj == null)
				return null;
			else if (obj is DesktopAppInfoLookupImplementor)
				return new DesktopAppInfoLookupAdapter (obj as DesktopAppInfoLookupImplementor);
			else if (obj as DesktopAppInfoLookup == null)
				return new DesktopAppInfoLookupAdapter (obj.Handle);
			else
				return obj as DesktopAppInfoLookup;
		}

        public DesktopAppInfoLookupImplementor Implementor { get; }

        [DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_desktop_app_info_lookup_get_default_for_uri_scheme(IntPtr raw, IntPtr uri_scheme);

		public AppInfo GetDefaultForUriScheme (string uri_scheme) {
			IntPtr native_uri_scheme = GLib.Marshaller.StringToPtrGStrdup (uri_scheme);
			var raw_ret = g_desktop_app_info_lookup_get_default_for_uri_scheme(Handle, native_uri_scheme);
			var ret = GLib.AppInfoAdapter.GetObject (raw_ret, false);
			GLib.Marshaller.Free (native_uri_scheme);
			return ret;
		}

#endregion
	}
}
