// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class FileAttributeMatcher : GLib.Opaque {

		[DllImport("libgio-2.0-0.dll")]
		static extern bool g_file_attribute_matcher_enumerate_namespace(IntPtr raw, IntPtr ns);

		public bool EnumerateNamespace(string ns) {
			IntPtr native_ns = GLib.Marshaller.StringToPtrGStrdup (ns);
			bool raw_ret = g_file_attribute_matcher_enumerate_namespace(Handle, native_ns);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_ns);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern bool g_file_attribute_matcher_matches_only(IntPtr raw, IntPtr attribute);

		public bool MatchesOnly(string attribute) {
			IntPtr native_attribute = GLib.Marshaller.StringToPtrGStrdup (attribute);
			bool raw_ret = g_file_attribute_matcher_matches_only(Handle, native_attribute);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_attribute);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern bool g_file_attribute_matcher_matches(IntPtr raw, IntPtr attribute);

		public bool Matches(string attribute) {
			IntPtr native_attribute = GLib.Marshaller.StringToPtrGStrdup (attribute);
			bool raw_ret = g_file_attribute_matcher_matches(Handle, native_attribute);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_attribute);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_file_attribute_matcher_enumerate_next(IntPtr raw);

		public string EnumerateNext() {
			var raw_ret = g_file_attribute_matcher_enumerate_next(Handle);
			string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
			return ret;
		}

		public FileAttributeMatcher(IntPtr raw) : base(raw) {}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_file_attribute_matcher_new(IntPtr attributes);

		public FileAttributeMatcher (string attributes) 
		{
			IntPtr native_attributes = GLib.Marshaller.StringToPtrGStrdup (attributes);
			Raw = g_file_attribute_matcher_new(native_attributes);
			GLib.Marshaller.Free (native_attributes);
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_file_attribute_matcher_ref(IntPtr raw);

		protected override void Ref (IntPtr raw)
		{
			if (!Owned) {
				g_file_attribute_matcher_ref (raw);
				Owned = true;
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern void g_file_attribute_matcher_unref(IntPtr raw);

		protected override void Unref (IntPtr raw)
		{
			if (Owned) {
				g_file_attribute_matcher_unref (raw);
				Owned = false;
			}
		}

		class FinalizerInfo {
			readonly IntPtr handle;

			public FinalizerInfo (IntPtr handle)
			{
				this.handle = handle;
			}

			public bool Handler ()
			{
				g_file_attribute_matcher_unref (handle);
				return false;
			}
		}

		~FileAttributeMatcher ()
		{
			if (!Owned)
				return;
			var info = new FinalizerInfo (Handle);
			GLib.Timeout.Add (50, new GLib.TimeoutHandler (info.Handler));
		}

#endregion
	}
}
