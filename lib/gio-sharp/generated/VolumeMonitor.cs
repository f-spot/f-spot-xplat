// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class VolumeMonitor : GLib.Object {

		[Obsolete]
		protected VolumeMonitor(GLib.GType gtype) : base(gtype) {}
		public VolumeMonitor(IntPtr raw) : base(raw) {}

		protected VolumeMonitor() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void MountChangedVMDelegate (IntPtr volume_monitor, IntPtr mount);

		static MountChangedVMDelegate MountChangedVMCallback;

		static void mountchanged_cb (IntPtr volume_monitor, IntPtr mount)
		{
			try {
				var volume_monitor_managed = GLib.Object.GetObject (volume_monitor, false) as VolumeMonitor;
				volume_monitor_managed.OnMountChanged (GLib.MountAdapter.GetObject (mount, false));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		static void OverrideMountChanged (GLib.GType gtype)
		{
			if (MountChangedVMCallback == null)
				MountChangedVMCallback = new MountChangedVMDelegate (mountchanged_cb);
			OverrideVirtualMethod (gtype, "mount-changed", MountChangedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(VolumeMonitor), ConnectionMethod="OverrideMountChanged")]
		protected virtual void OnMountChanged (Mount mount)
		{
			GLib.Value ret = GLib.Value.Empty;
			var inst_and_params = new GLib.ValueArray (2);
			var vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (mount);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("mount-changed")]
		public event MountChangedHandler MountChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "mount-changed", typeof (MountChangedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "mount-changed", typeof (MountChangedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DriveDisconnectedVMDelegate (IntPtr volume_monitor, IntPtr drive);

		static DriveDisconnectedVMDelegate DriveDisconnectedVMCallback;

		static void drivedisconnected_cb (IntPtr volume_monitor, IntPtr drive)
		{
			try {
				var volume_monitor_managed = GLib.Object.GetObject (volume_monitor, false) as VolumeMonitor;
				volume_monitor_managed.OnDriveDisconnected (GLib.DriveAdapter.GetObject (drive, false));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		static void OverrideDriveDisconnected (GLib.GType gtype)
		{
			if (DriveDisconnectedVMCallback == null)
				DriveDisconnectedVMCallback = new DriveDisconnectedVMDelegate (drivedisconnected_cb);
			OverrideVirtualMethod (gtype, "drive-disconnected", DriveDisconnectedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(VolumeMonitor), ConnectionMethod="OverrideDriveDisconnected")]
		protected virtual void OnDriveDisconnected (Drive drive)
		{
			GLib.Value ret = GLib.Value.Empty;
			var inst_and_params = new GLib.ValueArray (2);
			var vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (drive);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("drive-disconnected")]
		public event DriveDisconnectedHandler DriveDisconnected {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "drive-disconnected", typeof (DriveDisconnectedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "drive-disconnected", typeof (DriveDisconnectedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DriveConnectedVMDelegate (IntPtr volume_monitor, IntPtr drive);

		static DriveConnectedVMDelegate DriveConnectedVMCallback;

		static void driveconnected_cb (IntPtr volume_monitor, IntPtr drive)
		{
			try {
				var volume_monitor_managed = GLib.Object.GetObject (volume_monitor, false) as VolumeMonitor;
				volume_monitor_managed.OnDriveConnected (GLib.DriveAdapter.GetObject (drive, false));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		static void OverrideDriveConnected (GLib.GType gtype)
		{
			if (DriveConnectedVMCallback == null)
				DriveConnectedVMCallback = new DriveConnectedVMDelegate (driveconnected_cb);
			OverrideVirtualMethod (gtype, "drive-connected", DriveConnectedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(VolumeMonitor), ConnectionMethod="OverrideDriveConnected")]
		protected virtual void OnDriveConnected (Drive drive)
		{
			GLib.Value ret = GLib.Value.Empty;
			var inst_and_params = new GLib.ValueArray (2);
			var vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (drive);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("drive-connected")]
		public event DriveConnectedHandler DriveConnected {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "drive-connected", typeof (DriveConnectedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "drive-connected", typeof (DriveConnectedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void VolumeChangedVMDelegate (IntPtr volume_monitor, IntPtr volume);

		static VolumeChangedVMDelegate VolumeChangedVMCallback;

		static void volumechanged_cb (IntPtr volume_monitor, IntPtr volume)
		{
			try {
				var volume_monitor_managed = GLib.Object.GetObject (volume_monitor, false) as VolumeMonitor;
				volume_monitor_managed.OnVolumeChanged (GLib.VolumeAdapter.GetObject (volume, false));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		static void OverrideVolumeChanged (GLib.GType gtype)
		{
			if (VolumeChangedVMCallback == null)
				VolumeChangedVMCallback = new VolumeChangedVMDelegate (volumechanged_cb);
			OverrideVirtualMethod (gtype, "volume-changed", VolumeChangedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(VolumeMonitor), ConnectionMethod="OverrideVolumeChanged")]
		protected virtual void OnVolumeChanged (Volume volume)
		{
			GLib.Value ret = GLib.Value.Empty;
			var inst_and_params = new GLib.ValueArray (2);
			var vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (volume);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("volume-changed")]
		public event VolumeChangedHandler VolumeChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "volume-changed", typeof (VolumeChangedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "volume-changed", typeof (VolumeChangedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void VolumeAddedVMDelegate (IntPtr volume_monitor, IntPtr volume);

		static VolumeAddedVMDelegate VolumeAddedVMCallback;

		static void volumeadded_cb (IntPtr volume_monitor, IntPtr volume)
		{
			try {
				var volume_monitor_managed = GLib.Object.GetObject (volume_monitor, false) as VolumeMonitor;
				volume_monitor_managed.OnVolumeAdded (GLib.VolumeAdapter.GetObject (volume, false));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		static void OverrideVolumeAdded (GLib.GType gtype)
		{
			if (VolumeAddedVMCallback == null)
				VolumeAddedVMCallback = new VolumeAddedVMDelegate (volumeadded_cb);
			OverrideVirtualMethod (gtype, "volume-added", VolumeAddedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(VolumeMonitor), ConnectionMethod="OverrideVolumeAdded")]
		protected virtual void OnVolumeAdded (Volume volume)
		{
			GLib.Value ret = GLib.Value.Empty;
			var inst_and_params = new GLib.ValueArray (2);
			var vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (volume);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("volume-added")]
		public event VolumeAddedHandler VolumeAdded {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "volume-added", typeof (VolumeAddedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "volume-added", typeof (VolumeAddedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DriveStopButtonVMDelegate (IntPtr volume_monitor, IntPtr drive);

		static DriveStopButtonVMDelegate DriveStopButtonVMCallback;

		static void drivestopbutton_cb (IntPtr volume_monitor, IntPtr drive)
		{
			try {
				var volume_monitor_managed = GLib.Object.GetObject (volume_monitor, false) as VolumeMonitor;
				volume_monitor_managed.OnDriveStopButton (GLib.DriveAdapter.GetObject (drive, false));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		static void OverrideDriveStopButton (GLib.GType gtype)
		{
			if (DriveStopButtonVMCallback == null)
				DriveStopButtonVMCallback = new DriveStopButtonVMDelegate (drivestopbutton_cb);
			OverrideVirtualMethod (gtype, "drive-stop-button", DriveStopButtonVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(VolumeMonitor), ConnectionMethod="OverrideDriveStopButton")]
		protected virtual void OnDriveStopButton (Drive drive)
		{
			GLib.Value ret = GLib.Value.Empty;
			var inst_and_params = new GLib.ValueArray (2);
			var vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (drive);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("drive-stop-button")]
		public event DriveStopButtonHandler DriveStopButton {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "drive-stop-button", typeof (DriveStopButtonArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "drive-stop-button", typeof (DriveStopButtonArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void MountAddedVMDelegate (IntPtr volume_monitor, IntPtr mount);

		static MountAddedVMDelegate MountAddedVMCallback;

		static void mountadded_cb (IntPtr volume_monitor, IntPtr mount)
		{
			try {
				var volume_monitor_managed = GLib.Object.GetObject (volume_monitor, false) as VolumeMonitor;
				volume_monitor_managed.OnMountAdded (GLib.MountAdapter.GetObject (mount, false));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		static void OverrideMountAdded (GLib.GType gtype)
		{
			if (MountAddedVMCallback == null)
				MountAddedVMCallback = new MountAddedVMDelegate (mountadded_cb);
			OverrideVirtualMethod (gtype, "mount-added", MountAddedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(VolumeMonitor), ConnectionMethod="OverrideMountAdded")]
		protected virtual void OnMountAdded (Mount mount)
		{
			GLib.Value ret = GLib.Value.Empty;
			var inst_and_params = new GLib.ValueArray (2);
			var vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (mount);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("mount-added")]
		public event MountAddedHandler MountAdded {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "mount-added", typeof (MountAddedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "mount-added", typeof (MountAddedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DriveEjectButtonVMDelegate (IntPtr volume_monitor, IntPtr drive);

		static DriveEjectButtonVMDelegate DriveEjectButtonVMCallback;

		static void driveejectbutton_cb (IntPtr volume_monitor, IntPtr drive)
		{
			try {
				var volume_monitor_managed = GLib.Object.GetObject (volume_monitor, false) as VolumeMonitor;
				volume_monitor_managed.OnDriveEjectButton (GLib.DriveAdapter.GetObject (drive, false));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		static void OverrideDriveEjectButton (GLib.GType gtype)
		{
			if (DriveEjectButtonVMCallback == null)
				DriveEjectButtonVMCallback = new DriveEjectButtonVMDelegate (driveejectbutton_cb);
			OverrideVirtualMethod (gtype, "drive-eject-button", DriveEjectButtonVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(VolumeMonitor), ConnectionMethod="OverrideDriveEjectButton")]
		protected virtual void OnDriveEjectButton (Drive drive)
		{
			GLib.Value ret = GLib.Value.Empty;
			var inst_and_params = new GLib.ValueArray (2);
			var vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (drive);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("drive-eject-button")]
		public event DriveEjectButtonHandler DriveEjectButton {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "drive-eject-button", typeof (DriveEjectButtonArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "drive-eject-button", typeof (DriveEjectButtonArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void DriveChangedVMDelegate (IntPtr volume_monitor, IntPtr drive);

		static DriveChangedVMDelegate DriveChangedVMCallback;

		static void drivechanged_cb (IntPtr volume_monitor, IntPtr drive)
		{
			try {
				var volume_monitor_managed = GLib.Object.GetObject (volume_monitor, false) as VolumeMonitor;
				volume_monitor_managed.OnDriveChanged (GLib.DriveAdapter.GetObject (drive, false));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		static void OverrideDriveChanged (GLib.GType gtype)
		{
			if (DriveChangedVMCallback == null)
				DriveChangedVMCallback = new DriveChangedVMDelegate (drivechanged_cb);
			OverrideVirtualMethod (gtype, "drive-changed", DriveChangedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(VolumeMonitor), ConnectionMethod="OverrideDriveChanged")]
		protected virtual void OnDriveChanged (Drive drive)
		{
			GLib.Value ret = GLib.Value.Empty;
			var inst_and_params = new GLib.ValueArray (2);
			var vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (drive);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("drive-changed")]
		public event DriveChangedHandler DriveChanged {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "drive-changed", typeof (DriveChangedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "drive-changed", typeof (DriveChangedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void MountPreUnmountVMDelegate (IntPtr volume_monitor, IntPtr mount);

		static MountPreUnmountVMDelegate MountPreUnmountVMCallback;

		static void mountpreunmount_cb (IntPtr volume_monitor, IntPtr mount)
		{
			try {
				var volume_monitor_managed = GLib.Object.GetObject (volume_monitor, false) as VolumeMonitor;
				volume_monitor_managed.OnMountPreUnmount (GLib.MountAdapter.GetObject (mount, false));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		static void OverrideMountPreUnmount (GLib.GType gtype)
		{
			if (MountPreUnmountVMCallback == null)
				MountPreUnmountVMCallback = new MountPreUnmountVMDelegate (mountpreunmount_cb);
			OverrideVirtualMethod (gtype, "mount-pre-unmount", MountPreUnmountVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(VolumeMonitor), ConnectionMethod="OverrideMountPreUnmount")]
		protected virtual void OnMountPreUnmount (Mount mount)
		{
			GLib.Value ret = GLib.Value.Empty;
			var inst_and_params = new GLib.ValueArray (2);
			var vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (mount);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("mount-pre-unmount")]
		public event MountPreUnmountHandler MountPreUnmount {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "mount-pre-unmount", typeof (MountPreUnmountArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "mount-pre-unmount", typeof (MountPreUnmountArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void VolumeRemovedVMDelegate (IntPtr volume_monitor, IntPtr volume);

		static VolumeRemovedVMDelegate VolumeRemovedVMCallback;

		static void volumeremoved_cb (IntPtr volume_monitor, IntPtr volume)
		{
			try {
				var volume_monitor_managed = GLib.Object.GetObject (volume_monitor, false) as VolumeMonitor;
				volume_monitor_managed.OnVolumeRemoved (GLib.VolumeAdapter.GetObject (volume, false));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		static void OverrideVolumeRemoved (GLib.GType gtype)
		{
			if (VolumeRemovedVMCallback == null)
				VolumeRemovedVMCallback = new VolumeRemovedVMDelegate (volumeremoved_cb);
			OverrideVirtualMethod (gtype, "volume-removed", VolumeRemovedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(VolumeMonitor), ConnectionMethod="OverrideVolumeRemoved")]
		protected virtual void OnVolumeRemoved (Volume volume)
		{
			GLib.Value ret = GLib.Value.Empty;
			var inst_and_params = new GLib.ValueArray (2);
			var vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (volume);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("volume-removed")]
		public event VolumeRemovedHandler VolumeRemoved {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "volume-removed", typeof (VolumeRemovedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "volume-removed", typeof (VolumeRemovedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate void MountRemovedVMDelegate (IntPtr volume_monitor, IntPtr mount);

		static MountRemovedVMDelegate MountRemovedVMCallback;

		static void mountremoved_cb (IntPtr volume_monitor, IntPtr mount)
		{
			try {
				var volume_monitor_managed = GLib.Object.GetObject (volume_monitor, false) as VolumeMonitor;
				volume_monitor_managed.OnMountRemoved (GLib.MountAdapter.GetObject (mount, false));
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, false);
			}
		}

		static void OverrideMountRemoved (GLib.GType gtype)
		{
			if (MountRemovedVMCallback == null)
				MountRemovedVMCallback = new MountRemovedVMDelegate (mountremoved_cb);
			OverrideVirtualMethod (gtype, "mount-removed", MountRemovedVMCallback);
		}

		[GLib.DefaultSignalHandler(Type=typeof(VolumeMonitor), ConnectionMethod="OverrideMountRemoved")]
		protected virtual void OnMountRemoved (Mount mount)
		{
			GLib.Value ret = GLib.Value.Empty;
			var inst_and_params = new GLib.ValueArray (2);
			var vals = new GLib.Value [2];
			vals [0] = new GLib.Value (this);
			inst_and_params.Append (vals [0]);
			vals [1] = new GLib.Value (mount);
			inst_and_params.Append (vals [1]);
			g_signal_chain_from_overridden (inst_and_params.ArrayPtr, ref ret);
			foreach (GLib.Value v in vals)
				v.Dispose ();
		}

		[GLib.Signal("mount-removed")]
		public event MountRemovedHandler MountRemoved {
			add {
				GLib.Signal sig = GLib.Signal.Lookup (this, "mount-removed", typeof (MountRemovedArgs));
				sig.AddDelegate (value);
			}
			remove {
				GLib.Signal sig = GLib.Signal.Lookup (this, "mount-removed", typeof (MountRemovedArgs));
				sig.RemoveDelegate (value);
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_volume_monitor_get_mount_for_uuid(IntPtr raw, IntPtr uuid);

		public Mount GetMountForUuid (string uuid) {
			IntPtr native_uuid = GLib.Marshaller.StringToPtrGStrdup (uuid);
			var raw_ret = g_volume_monitor_get_mount_for_uuid(Handle, native_uuid);
			var ret = GLib.MountAdapter.GetObject (raw_ret, false);
			GLib.Marshaller.Free (native_uuid);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_volume_monitor_get();

		public static VolumeMonitor Default { 
			get {
				var raw_ret = g_volume_monitor_get();
				var ret = GLib.Object.GetObject (raw_ret) as VolumeMonitor;
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_volume_monitor_get_type();

		public static new GLib.GType GType { 
			get {
				var raw_ret = g_volume_monitor_get_type();
				var ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_volume_monitor_adopt_orphan_mount(IntPtr mount);

		[Obsolete]
		public static Volume AdoptOrphanMount (Mount mount) {
			var raw_ret = g_volume_monitor_adopt_orphan_mount(mount == null ? IntPtr.Zero : mount.Handle);
			var ret = GLib.VolumeAdapter.GetObject (raw_ret, false);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_volume_monitor_get_mounts(IntPtr raw);

		public Mount[] Mounts { 
			get {
				var raw_ret = g_volume_monitor_get_mounts(Handle);
				var ret = (Mount[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.List), true, false, typeof(Mount));
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_volume_monitor_get_connected_drives(IntPtr raw);

		public Drive[] ConnectedDrives { 
			get {
				var raw_ret = g_volume_monitor_get_connected_drives(Handle);
				var ret = (Drive[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.List), true, false, typeof(Drive));
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_volume_monitor_get_volume_for_uuid(IntPtr raw, IntPtr uuid);

		public Volume GetVolumeForUuid (string uuid) {
			IntPtr native_uuid = GLib.Marshaller.StringToPtrGStrdup (uuid);
			var raw_ret = g_volume_monitor_get_volume_for_uuid(Handle, native_uuid);
			var ret = GLib.VolumeAdapter.GetObject (raw_ret, false);
			GLib.Marshaller.Free (native_uuid);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_volume_monitor_get_volumes(IntPtr raw);

		public Volume[] Volumes { 
			get {
				var raw_ret = g_volume_monitor_get_volumes(Handle);
				var ret = (Volume[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.List), true, false, typeof(Volume));
				return ret;
			}
		}

#endregion
	}
}
