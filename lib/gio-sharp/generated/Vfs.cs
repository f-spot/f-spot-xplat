// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GLib {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class Vfs : GLib.Object {

		[Obsolete]
		protected Vfs(GLib.GType gtype) : base(gtype) {}
		public Vfs(IntPtr raw) : base(raw) {}

		protected Vfs() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_vfs_parse_name(IntPtr raw, IntPtr parse_name);

		public File ParseName (string parse_name) {
			IntPtr native_parse_name = GLib.Marshaller.StringToPtrGStrdup (parse_name);
			var raw_ret = g_vfs_parse_name(Handle, native_parse_name);
			var ret = GLib.FileAdapter.GetObject (raw_ret, false);
			GLib.Marshaller.Free (native_parse_name);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_vfs_get_default();

		public static Vfs Default { 
			get {
				var raw_ret = g_vfs_get_default();
				var ret = GLib.Object.GetObject (raw_ret) as Vfs;
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_vfs_get_local();

		public static Vfs Local { 
			get {
				var raw_ret = g_vfs_get_local();
				var ret = GLib.Object.GetObject (raw_ret) as Vfs;
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern bool g_vfs_is_active(IntPtr raw);

		public bool IsActive { 
			get {
				bool raw_ret = g_vfs_is_active(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_vfs_get_supported_uri_schemes(IntPtr raw);

		public string SupportedUriSchemes { 
			get {
				var raw_ret = g_vfs_get_supported_uri_schemes(Handle);
				string ret = GLib.Marshaller.Utf8PtrToString (raw_ret);
				return ret;
			}
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_vfs_get_file_for_path(IntPtr raw, IntPtr path);

		public File GetFileForPath (string path) {
			IntPtr native_path = GLib.Marshaller.StringToPtrGStrdup (path);
			var raw_ret = g_vfs_get_file_for_path(Handle, native_path);
			var ret = GLib.FileAdapter.GetObject (raw_ret, false);
			GLib.Marshaller.Free (native_path);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_vfs_get_file_for_uri(IntPtr raw, IntPtr uri);

		public File GetFileForUri (string uri) {
			IntPtr native_uri = GLib.Marshaller.StringToPtrGStrdup (uri);
			var raw_ret = g_vfs_get_file_for_uri(Handle, native_uri);
			var ret = GLib.FileAdapter.GetObject (raw_ret, false);
			GLib.Marshaller.Free (native_uri);
			return ret;
		}

		[DllImport("libgio-2.0-0.dll")]
		static extern IntPtr g_vfs_get_type();

		public static new GLib.GType GType { 
			get {
				var raw_ret = g_vfs_get_type();
				var ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
