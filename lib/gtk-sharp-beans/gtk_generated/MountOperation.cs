// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gtk {

	using System;
	using System.Collections;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public class MountOperation : GLib.MountOperation {

		[Obsolete]
		protected MountOperation(GLib.GType gtype) : base(gtype) {}
		public MountOperation(IntPtr raw) : base(raw) {}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_mount_operation_new(IntPtr parent);

		public MountOperation (Gtk.Window parent) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (MountOperation)) {
				var vals = new ArrayList();
				var names = new ArrayList();
				if (parent != null) {
					names.Add ("parent");
					vals.Add (new GLib.Value (parent));
				}
				CreateNativeObject ((string[])names.ToArray (typeof (string)), (GLib.Value[])vals.ToArray (typeof (GLib.Value)));
				return;
			}
			Raw = gtk_mount_operation_new(parent == null ? IntPtr.Zero : parent.Handle);
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gtk_mount_operation_is_showing(IntPtr raw);

		[GLib.Property ("is-showing")]
		public bool IsShowing {
			get  {
				bool raw_ret = gtk_mount_operation_is_showing(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_mount_operation_get_parent(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_mount_operation_set_parent(IntPtr raw, IntPtr parent);

		[GLib.Property ("parent")]
		public Gtk.Window Parent {
			get  {
				var raw_ret = gtk_mount_operation_get_parent(Handle);
				var ret = GLib.Object.GetObject(raw_ret) as Gtk.Window;
				return ret;
			}
			set  {
				gtk_mount_operation_set_parent(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_mount_operation_get_screen(IntPtr raw);

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gtk_mount_operation_set_screen(IntPtr raw, IntPtr screen);

		[GLib.Property ("screen")]
		public Gdk.Screen Screen {
			get  {
				var raw_ret = gtk_mount_operation_get_screen(Handle);
				var ret = GLib.Object.GetObject(raw_ret) as Gdk.Screen;
				return ret;
			}
			set  {
				gtk_mount_operation_set_screen(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("libgtk-win32-2.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gtk_mount_operation_get_type();

		public static new GLib.GType GType { 
			get {
				var raw_ret = gtk_mount_operation_get_type();
				var ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

#endregion
	}
}
